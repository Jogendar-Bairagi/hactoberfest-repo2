/**
 * Checks the strength of a password and provides suggestions.
 * @param {string} password
 * @returns {{strength: string, suggestions: string[]}}
 */
/*Common pattern detect function */
function detectCommonPatterns(password) {
  const patterns = [
    /1234|abcd|qwerty|password|letmein|admin/i, // common patterns
    /(.)\1{2,}/, // repeated characters (aaa, 111)
    /[a-z]{4,}/, // long sequences of lowercase letters
    /[A-Z]{4,}/, // long sequences of uppercase letters
    /(\d{4,})/, // long sequences of digits
  ];

  let issues = [];

  if (patterns[0].test(password)) issues.push("Avoid common patterns like '1234' or 'password'.");
  if (patterns[1].test(password)) issues.push("Avoid repeated characters (e.g., 'aaa' or '111').");
  if (patterns[2].test(password)) issues.push("Too many consecutive lowercase letters — mix in other characters.");
  if (patterns[3].test(password)) issues.push("Too many consecutive uppercase letters — mix in other characters.");
  if (patterns[4].test(password)) issues.push("Avoid long digit sequences like '12345'.");

  return issues;
}

function checkPasswordStrength(password) { 
    const suggestions = [];
    let strength = 0;
    const specialChars = /[@$!%*?&]/;

    if (password.length >= 8) {
        strength++;
    } else {
        suggestions.push("Use at least 8 characters.");
    }

    if (/[a-z]/.test(password)) {
        strength++;
    } else {
        suggestions.push("Add lowercase letters.");
    }

    if (/[A-Z]/.test(password)) {
        strength++;
    } else {
        suggestions.push("Add uppercase letters.");
    }

    if (/[0-9]/.test(password)) {
        strength++;
    } else {
        suggestions.push("Add numbers.");
    }

    if (specialChars.test(password)) {
        strength++;
    } else {
        suggestions.push("Add special characters (@$!%*?&).");
    }

    // Check for repeated characters
    if (/(\w)\1{2,}/.test(password)) {
        suggestions.push("Avoid repeated characters.");
        strength--;
    }

//check for common pattern password
const patternIssues = detectCommonPatterns(password);
  if (patternIssues.length > 0) {
    feedback.push(...patternIssues);
    strength -= patternIssues.length; // penalize score if needed
  }

  return { strength, feedback };
    let label;
    switch (true) {
        case strength >= 5:
            label = "Very Strong";
            break;
        case strength === 4:
            label = "Strong";
            break;
        case strength === 3:
            label = "Moderate";
            break;
        case strength === 2:
            label = "Weak";
            break;
        default:
            label = "Very Weak";
    }

    return { strength: label, suggestions };
}
